import streamlit as st
import whisper
from fuzzywuzzy import fuzz
from pydub import AudioSegment
import numpy as np
import tempfile
import os
from datetime import datetime, timedelta
import io
import difflib
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from collections import Counter
import json

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Ch·∫•m Ph√°t √Çm Ti·∫øng Anh",
    page_icon="assets/logo-augusttrung.png",
    layout="wide",
)

# CSS t√πy ch·ªânh
st.markdown(
    """
<style>
    .stButton>button {
        width: 100%;
    }
    .score-excellent {
        color: #00c853;
        font-size: 48px;
        font-weight: bold;
    }
    .score-good {
        color: #ffd600;
        font-size: 48px;
        font-weight: bold;
    }
    .score-average {
        color: #ff9800;
        font-size: 48px;
        font-weight: bold;
    }
    .score-poor {
        color: #ff5252;
        font-size: 48px;
        font-weight: bold;
    }
    .stat-box {
        background-color: #f0f2f6;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
    }
    .streak-badge {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 15px;
        border-radius: 10px;
        text-align: center;
        font-size: 24px;
        font-weight: bold;
    }
</style>
""",
    unsafe_allow_html=True,
)

# Kh·ªüi t·∫°o session state
if "history" not in st.session_state:
    st.session_state.history = []

if "model" not in st.session_state:
    st.session_state.model = None

if "user_name" not in st.session_state:
    st.session_state.user_name = "H·ªçc vi√™n"

if "practice_mode" not in st.session_state:
    st.session_state.practice_mode = "T·ª± do"

if "daily_goal" not in st.session_state:
    st.session_state.daily_goal = 10

if "favorite_sentences" not in st.session_state:
    st.session_state.favorite_sentences = []

if "model_size" not in st.session_state:
    st.session_state.model_size = "base"

if "dark_mode" not in st.session_state:
    st.session_state.dark_mode = False

if "sentence_notes" not in st.session_state:
    st.session_state.sentence_notes = {}

# Th∆∞ vi·ªán c√¢u m·∫´u theo ch·ªß ƒë·ªÅ
SENTENCE_LIBRARY = {
    "üìö C∆° b·∫£n - Beginner": [
        "Hello, my name is John",
        "I like apples",
        "This is a book",
        "Good morning teacher",
        "How are you today",
        "Thank you very much",
        "I am a student",
        "The weather is nice",
    ],
    "üéì Trung c·∫•p - Intermediate": [
        "I want to eat an apple",
        "She is reading a book in the library",
        "The weather is nice today",
        "Can you help me with this problem",
        "I am studying English every day",
        "My favorite color is blue",
        "I enjoy listening to music",
        "We will go to the park tomorrow",
    ],
    "üöÄ N√¢ng cao - Advanced": [
        "I would like to introduce myself to everyone here",
        "The quick brown fox jumps over the lazy dog",
        "She sells seashells by the seashore",
        "Peter Piper picked a peck of pickled peppers",
        "How much wood would a woodchuck chuck",
        "The sixth sick sheikh's sixth sheep's sick",
        "I saw Susie sitting in a shoeshine shop",
        "Unique New York, unique New York, you know you need unique New York",
    ],
    "üíº Giao ti·∫øp - Communication": [
        "Excuse me, where is the nearest bus stop",
        "Could you please speak more slowly",
        "I would like to book a table for two",
        "What time does the meeting start",
        "I need to cancel my appointment",
        "Can I have the menu please",
        "How much does this cost",
        "I'm looking for the train station",
    ],
    "üìñ IELTS Speaking": [
        "I believe that education is the key to success",
        "In my opinion, technology has changed our lives",
        "There are several reasons why I prefer living in the city",
        "I would like to talk about my hometown",
        "One of the most important things in life is health",
        "I think that learning a foreign language is essential",
    ],
}


@st.cache_resource
def load_whisper_model(model_size="base"):
    """Load m√¥ h√¨nh Whisper (ch·ªâ load 1 l·∫ßn)"""
    try:
        model = whisper.load_model(model_size)
        return model
    except Exception as e:
        st.error(f"L·ªói khi load Whisper model: {e}")
        return None


# T·ª± ƒë·ªông load model l·∫ßn ƒë·∫ßu
if st.session_state.model is None:
    st.session_state.model = load_whisper_model("base")


def convert_audio_to_wav(audio_file):
    """Chuy·ªÉn ƒë·ªïi file audio v·ªÅ ƒë·ªãnh d·∫°ng WAV chu·∫©n"""
    try:
        audio = AudioSegment.from_file(audio_file)
        audio = audio.set_channels(1)
        audio = audio.set_frame_rate(16000)
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".wav")
        audio.export(temp_file.name, format="wav")
        return temp_file.name
    except Exception as e:
        st.error(f"L·ªói chuy·ªÉn ƒë·ªïi audio: {e}")
        return None


def transcribe_audio(audio_path, model):
    """Nh·∫≠n d·∫°ng gi·ªçng n√≥i t·ª´ file audio b·∫±ng Whisper"""
    try:
        result = model.transcribe(audio_path, language="en")
        return result["text"].strip()
    except Exception as e:
        st.error(f"L·ªói nh·∫≠n d·∫°ng gi·ªçng n√≥i: {e}")
        return None


def compare_texts(reference, transcribed):
    """So s√°nh c√¢u m·∫´u v·ªõi c√¢u nh·∫≠n d·∫°ng ƒë∆∞·ª£c"""
    ref_clean = reference.lower().strip()
    trans_clean = transcribed.lower().strip()

    similarity = fuzz.ratio(ref_clean, trans_clean)

    ref_words = ref_clean.split()
    trans_words = trans_clean.split()

    matcher = difflib.SequenceMatcher(None, ref_words, trans_words)
    wrong_words = []

    for tag, i1, i2, j1, j2 in matcher.get_opcodes():
        if tag == "delete":
            for word in ref_words[i1:i2]:
                wrong_words.append(f"‚ùå Thi·∫øu: '{word}'")
        elif tag == "insert":
            for word in trans_words[j1:j2]:
                wrong_words.append(f"‚ûï Th·ª´a: '{word}'")
        elif tag == "replace":
            for ref_w, trans_w in zip(ref_words[i1:i2], trans_words[j1:j2]):
                wrong_words.append(f"üîÑ '{ref_w}' ‚Üí '{trans_w}'")

    return similarity, wrong_words


def save_result_to_history(reference, transcribed, score, wrong_words):
    """L∆∞u k·∫øt qu·∫£ v√†o l·ªãch s·ª≠"""
    result = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "date": datetime.now().strftime("%Y-%m-%d"),
        "time": datetime.now().strftime("%H:%M:%S"),
        "reference": reference,
        "transcribed": transcribed,
        "score": score,
        "wrong_words": wrong_words,
        "word_count": len(reference.split()),
        "user": st.session_state.user_name,
        "mode": st.session_state.practice_mode,
    }
    st.session_state.history.append(result)


def export_history_to_csv():
    """Xu·∫•t l·ªãch s·ª≠ ra CSV"""
    if not st.session_state.history:
        return None

    df = pd.DataFrame(st.session_state.history)
    return df.to_csv(index=False).encode("utf-8")


def export_history_to_json():
    """Xu·∫•t l·ªãch s·ª≠ ra JSON (ƒë·ªÉ backup)"""
    if not st.session_state.history:
        return None

    data = {
        "export_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "user_name": st.session_state.user_name,
        "history": st.session_state.history,
        "favorites": st.session_state.favorite_sentences,
        "notes": st.session_state.sentence_notes,
    }
    return json.dumps(data, indent=2, ensure_ascii=False).encode("utf-8")


def import_history_from_json(json_file):
    """Nh·∫≠p l·ªãch s·ª≠ t·ª´ JSON"""
    try:
        data = json.loads(json_file.read())
        st.session_state.history = data.get("history", [])
        st.session_state.favorite_sentences = data.get("favorites", [])
        st.session_state.sentence_notes = data.get("notes", {})
        return True
    except Exception as e:
        st.error(f"L·ªói import: {e}")
        return False


def get_statistics():
    """T√≠nh to√°n th·ªëng k√™"""
    if not st.session_state.history:
        return None

    df = pd.DataFrame(st.session_state.history)

    stats = {
        "total_attempts": len(df),
        "avg_score": df["score"].mean(),
        "max_score": df["score"].max(),
        "min_score": df["score"].min(),
        "today_attempts": len(df[df["date"] == datetime.now().strftime("%Y-%m-%d")]),
        "excellent_count": len(df[df["score"] >= 90]),
        "good_count": len(df[(df["score"] >= 75) & (df["score"] < 90)]),
        "average_count": len(df[(df["score"] >= 60) & (df["score"] < 75)]),
        "poor_count": len(df[df["score"] < 60]),
    }

    return stats


def calculate_streak():
    """T√≠nh chu·ªói ng√†y luy·ªán t·∫≠p li√™n t·ª•c"""
    if not st.session_state.history:
        return 0

    df = pd.DataFrame(st.session_state.history)
    unique_dates = sorted(df["date"].unique(), reverse=True)

    if not unique_dates:
        return 0

    today = datetime.now().strftime("%Y-%m-%d")

    # Ki·ªÉm tra c√≥ luy·ªán h√¥m nay kh√¥ng
    if unique_dates[0] != today:
        # Ki·ªÉm tra c√≥ luy·ªán h√¥m qua kh√¥ng
        yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
        if unique_dates[0] != yesterday:
            return 0

    streak = 1
    for i in range(len(unique_dates) - 1):
        current = datetime.strptime(unique_dates[i], "%Y-%m-%d")
        next_date = datetime.strptime(unique_dates[i + 1], "%Y-%m-%d")

        if (current - next_date).days == 1:
            streak += 1
        else:
            break

    return streak


def get_weak_words():
    """Ph√¢n t√≠ch t·ª´ th∆∞·ªùng b·ªã sai"""
    if not st.session_state.history:
        return []

    all_wrong_words = []
    for item in st.session_state.history:
        for error in item.get("wrong_words", []):
            if "‚Üí" in error:
                word = error.split("'")[1]
                all_wrong_words.append(word)
            elif "Thi·∫øu" in error:
                word = error.split("'")[1]
                all_wrong_words.append(word)

    word_counts = Counter(all_wrong_words)
    return word_counts.most_common(10)


def create_progress_chart():
    """T·∫°o bi·ªÉu ƒë·ªì ti·∫øn ƒë·ªô"""
    if not st.session_state.history:
        return None

    df = pd.DataFrame(st.session_state.history)
    df["attempt_number"] = range(1, len(df) + 1)

    fig = go.Figure()

    fig.add_trace(
        go.Scatter(
            x=df["attempt_number"],
            y=df["score"],
            mode="lines+markers",
            name="ƒêi·ªÉm s·ªë",
            line=dict(color="#1f77b4", width=3),
            marker=dict(size=8),
        )
    )

    fig.add_hline(
        y=90, line_dash="dash", line_color="green", annotation_text="Xu·∫•t s·∫Øc (90)"
    )
    fig.add_hline(
        y=75, line_dash="dash", line_color="orange", annotation_text="Kh√° (75)"
    )
    fig.add_hline(
        y=60, line_dash="dash", line_color="red", annotation_text="Trung b√¨nh (60)"
    )

    fig.update_layout(
        title="üìà Bi·ªÉu ƒë·ªì ti·∫øn ƒë·ªô h·ªçc t·∫≠p",
        xaxis_title="L·∫ßn ch·∫•m",
        yaxis_title="ƒêi·ªÉm s·ªë",
        yaxis_range=[0, 105],
        hovermode="x unified",
    )

    return fig


def create_score_distribution():
    """T·∫°o bi·ªÉu ƒë·ªì ph√¢n b·ªë ƒëi·ªÉm"""
    if not st.session_state.history:
        return None

    df = pd.DataFrame(st.session_state.history)

    fig = go.Figure()

    fig.add_trace(
        go.Histogram(x=df["score"], nbinsx=20, marker_color="#1f77b4", opacity=0.7)
    )

    fig.update_layout(
        title="üìä Ph√¢n b·ªë ƒëi·ªÉm s·ªë",
        xaxis_title="ƒêi·ªÉm s·ªë",
        yaxis_title="S·ªë l·∫ßn",
        bargap=0.1,
    )

    return fig


def create_weekly_chart():
    """Bi·ªÉu ƒë·ªì theo tu·∫ßn"""
    if not st.session_state.history:
        return None

    df = pd.DataFrame(st.session_state.history)
    df["date"] = pd.to_datetime(df["date"])

    # L·∫•y 7 ng√†y g·∫ßn nh·∫•t
    end_date = datetime.now()
    start_date = end_date - timedelta(days=6)

    date_range = pd.date_range(start=start_date, end=end_date)
    daily_stats = []

    for date in date_range:
        date_str = date.strftime("%Y-%m-%d")
        day_data = df[df["date"] == date_str]

        if len(day_data) > 0:
            daily_stats.append(
                {
                    "date": date.strftime("%d/%m"),
                    "count": len(day_data),
                    "avg_score": day_data["score"].mean(),
                }
            )
        else:
            daily_stats.append(
                {"date": date.strftime("%d/%m"), "count": 0, "avg_score": 0}
            )

    stats_df = pd.DataFrame(daily_stats)

    fig = go.Figure()

    fig.add_trace(
        go.Bar(
            x=stats_df["date"],
            y=stats_df["count"],
            name="S·ªë l·∫ßn luy·ªán",
            marker_color="#1f77b4",
        )
    )

    fig.update_layout(
        title="üìÖ Ho·∫°t ƒë·ªông 7 ng√†y g·∫ßn nh·∫•t",
        xaxis_title="Ng√†y",
        yaxis_title="S·ªë l·∫ßn luy·ªán t·∫≠p",
    )

    return fig


# ========== GIAO DI·ªÜN CH√çNH ==========

# Header v·ªõi tabs
tab1, tab2, tab3, tab4 = st.tabs(
    ["üéØ Luy·ªán t·∫≠p", "üìä Th·ªëng k√™", "üìö Th∆∞ vi·ªán c√¢u", "‚öôÔ∏è C√†i ƒë·∫∑t"]
)

# TAB 1: LUY·ªÜN T·∫¨P
with tab1:
    st.title("üéØ ·ª®NG D·ª§NG CH·∫§M PH√ÅT √ÇM TI·∫æNG ANH")

    # Th√¥ng tin ng∆∞·ªùi d√πng v√† streak
    col_info1, col_info2, col_info3, col_info4 = st.columns(4)

    with col_info1:
        st.markdown(f"**üë§ H·ªçc vi√™n:** {st.session_state.user_name}")

    with col_info2:
        streak = calculate_streak()
        if streak > 0:
            st.markdown(f"**üî• Streak:** {streak} ng√†y")

    with col_info3:
        stats = get_statistics()
        if stats:
            st.markdown(
                f"**üìà H√¥m nay:** {stats['today_attempts']}/{st.session_state.daily_goal} l·∫ßn"
            )
            progress = min(stats["today_attempts"] / st.session_state.daily_goal, 1.0)
            st.progress(progress)

    with col_info4:
        if stats:
            st.markdown(f"**‚≠ê ƒêi·ªÉm TB:** {stats['avg_score']:.1f}/100")

    st.divider()

    # Ch·ªçn ch·∫ø ƒë·ªô luy·ªán t·∫≠p
    practice_mode = st.radio(
        "üéÆ Ch·∫ø ƒë·ªô luy·ªán t·∫≠p:",
        ["T·ª± do", "Theo ch·ªß ƒë·ªÅ", "Y√™u th√≠ch"],
        horizontal=True,
        key="practice_mode_radio",
    )
    st.session_state.practice_mode = practice_mode

    # Ph·∫ßn nh·∫≠p c√¢u m·∫´u
    st.subheader("üìù B∆∞·ªõc 1: Ch·ªçn ho·∫∑c nh·∫≠p c√¢u m·∫´u")

    if practice_mode == "Theo ch·ªß ƒë·ªÅ":
        col_cat, col_sent = st.columns([1, 2])
        with col_cat:
            category = st.selectbox("Ch·ªçn ch·ªß ƒë·ªÅ:", list(SENTENCE_LIBRARY.keys()))
        with col_sent:
            reference_text = st.selectbox("Ch·ªçn c√¢u:", SENTENCE_LIBRARY[category])
    elif practice_mode == "Y√™u th√≠ch":
        if st.session_state.favorite_sentences:
            reference_text = st.selectbox(
                "Ch·ªçn t·ª´ danh s√°ch y√™u th√≠ch:", st.session_state.favorite_sentences
            )
        else:
            st.info(
                "üí° Ch∆∞a c√≥ c√¢u y√™u th√≠ch. Th√™m c√¢u y√™u th√≠ch trong tab 'Th∆∞ vi·ªán c√¢u'!"
            )
            reference_text = st.text_input(
                "Ho·∫∑c nh·∫≠p c√¢u m·ªõi:",
                value="I want to eat an apple",
                placeholder="Nh·∫≠p c√¢u ti·∫øng Anh...",
            )
    else:
        reference_text = st.text_input(
            "C√¢u m·∫´u:",
            value="I want to eat an apple",
            placeholder="Nh·∫≠p c√¢u ti·∫øng Anh c·∫ßn luy·ªán ph√°t √¢m...",
        )

    # Hi·ªÉn th·ªã th√¥ng tin c√¢u v√† ghi ch√∫
    if reference_text:
        col_info_a, col_info_b = st.columns(2)
        with col_info_a:
            st.caption(f"üìè ƒê·ªô d√†i: {len(reference_text.split())} t·ª´")
        with col_info_b:
            st.caption(f"üî§ K√Ω t·ª±: {len(reference_text)} k√Ω t·ª±")

        # Hi·ªÉn th·ªã ghi ch√∫ n·∫øu c√≥
        if reference_text in st.session_state.sentence_notes:
            st.info(f"üìù Ghi ch√∫: {st.session_state.sentence_notes[reference_text]}")

    st.divider()

    # Ph·∫ßn ghi √¢m v√† upload
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üéôÔ∏è B∆∞·ªõc 2a: Ghi √¢m tr·ª±c ti·∫øp")
        audio_recording = st.audio_input("Nh·∫•n ƒë·ªÉ ghi √¢m:")

    with col2:
        st.subheader("üì§ B∆∞·ªõc 2b: Ho·∫∑c upload file audio")
        uploaded_file = st.file_uploader(
            "Ch·ªçn file audio:",
            type=["wav", "mp3", "m4a", "ogg", "flac"],
            help="H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: WAV, MP3, M4A, OGG, FLAC",
        )

    st.divider()

    # N√∫t ch·∫•m ƒëi·ªÉm
    st.subheader("üéØ B∆∞·ªõc 3: Ch·∫•m ƒëi·ªÉm")

    if st.button("üîç Ch·∫•m ƒëi·ªÉm ph√°t √¢m", type="primary", use_container_width=True):

        if not reference_text:
            st.error("‚ö†Ô∏è Vui l√≤ng nh·∫≠p c√¢u m·∫´u!")
        elif not audio_recording and not uploaded_file:
            st.error("‚ö†Ô∏è Vui l√≤ng ghi √¢m ho·∫∑c upload file audio!")
        elif not st.session_state.model:
            st.error("‚ö†Ô∏è Model ch∆∞a ƒë∆∞·ª£c load. Vui l√≤ng load trong tab C√†i ƒë·∫∑t.")
        else:
            with st.spinner("üîÑ ƒêang x·ª≠ l√Ω √¢m thanh..."):
                try:
                    audio_source = uploaded_file if uploaded_file else audio_recording
                    wav_path = convert_audio_to_wav(audio_source)

                    if wav_path:
                        with st.spinner("üéß ƒêang nh·∫≠n d·∫°ng gi·ªçng n√≥i..."):
                            transcribed_text = transcribe_audio(
                                wav_path, st.session_state.model
                            )

                        try:
                            os.unlink(wav_path)
                        except:
                            pass

                        if transcribed_text:
                            score, wrong_words = compare_texts(
                                reference_text, transcribed_text
                            )
                            save_result_to_history(
                                reference_text, transcribed_text, score, wrong_words
                            )

                            st.success("‚úÖ Ch·∫•m ƒëi·ªÉm ho√†n t·∫•t!")
                            st.balloons()

                            st.divider()

                            # K·∫øt qu·∫£ v·ªõi animation
                            col_result1, col_result2 = st.columns(2)

                            with col_result1:
                                st.markdown("**üìù C√¢u m·∫´u:**")
                                st.info(reference_text)

                            with col_result2:
                                st.markdown("**üó£Ô∏è B·∫°n ƒë√£ n√≥i:**")
                                st.info(transcribed_text)

                            # ƒêi·ªÉm s·ªë l·ªõn v·ªõi m√†u s·∫Øc
                            st.markdown("### üéØ ƒêi·ªÉm s·ªë")

                            if score >= 90:
                                score_class = "score-excellent"
                                grade = "Xu·∫•t s·∫Øc"
                                emoji = "üü¢"
                            elif score >= 75:
                                score_class = "score-good"
                                grade = "Kh√°"
                                emoji = "üü°"
                            elif score >= 60:
                                score_class = "score-average"
                                grade = "Trung b√¨nh"
                                emoji = "üü†"
                            else:
                                score_class = "score-poor"
                                grade = "C·∫ßn c·∫£i thi·ªán"
                                emoji = "üî¥"

                            col_score1, col_score2 = st.columns([1, 2])

                            with col_score1:
                                st.markdown(
                                    f'<div class="{score_class}">{emoji} {score}</div>',
                                    unsafe_allow_html=True,
                                )

                            with col_score2:
                                st.markdown(f"### {grade}")
                                st.progress(score / 100)

                                # L·ªùi khuy√™n
                                if score >= 90:
                                    st.success("üéâ Xu·∫•t s·∫Øc! Ph√°t √¢m c·ªßa b·∫°n r·∫•t t·ªët!")
                                elif score >= 75:
                                    st.info(
                                        "üëç T·ªët l·∫Øm! Ti·∫øp t·ª•c luy·ªán t·∫≠p ƒë·ªÉ ho√†n thi·ªán h∆°n."
                                    )
                                elif score >= 60:
                                    st.warning(
                                        "üí™ Kh√° ·ªïn! H√£y ch√∫ √Ω c√°c t·ª´ b·ªã sai ph√≠a d∆∞·ªõi."
                                    )
                                else:
                                    st.error(
                                        "üìö C·∫ßn c·∫£i thi·ªán. H√£y nghe v√† b·∫Øt ch∆∞·ªõc k·ªπ h∆°n."
                                    )

                            # T·ª´ sai
                            if wrong_words:
                                st.markdown("### ‚ö†Ô∏è Chi ti·∫øt l·ªói:")
                                for word in wrong_words:
                                    st.warning(word)
                            else:
                                st.success("üéâ Ho√†n h·∫£o! Kh√¥ng c√≥ l·ªói n√†o!")

                            # G·ª£i √Ω luy·ªán t·∫≠p
                            if wrong_words:
                                with st.expander("üí° G·ª£i √Ω c·∫£i thi·ªán"):
                                    st.write("**C√°ch luy·ªán t·∫≠p hi·ªáu qu·∫£:**")
                                    st.write("1. Nghe l·∫°i c√¢u m·∫´u t·ª´ ng∆∞·ªùi b·∫£n ng·ªØ")
                                    st.write("2. T·∫≠p ph√°t √¢m ch·∫≠m t·ª´ng t·ª´ b·ªã sai")
                                    st.write("3. Ghi √¢m l·∫°i v√† so s√°nh")
                                    st.write("4. Luy·ªán t·∫≠p 3-5 l·∫ßn/ng√†y")

                        else:
                            st.error(
                                "‚ùå Kh√¥ng th·ªÉ nh·∫≠n d·∫°ng gi·ªçng n√≥i. Vui l√≤ng th·ª≠ l·∫°i."
                            )
                    else:
                        st.error("‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω file audio.")

                except Exception as e:
                    st.error(f"‚ùå L·ªói: {e}")

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ g·∫ßn ƒë√¢y
    if st.session_state.history:
        st.divider()
        st.subheader("üìú L·ªãch s·ª≠ g·∫ßn ƒë√¢y (5 l·∫ßn cu·ªëi)")

        for item in reversed(st.session_state.history[-5:]):
            with st.expander(f"‚è∞ {item['timestamp']} - ƒêi·ªÉm: {item['score']}/100"):
                col_h1, col_h2 = st.columns(2)
                with col_h1:
                    st.write(f"**üìù C√¢u m·∫´u:** {item['reference']}")
                    st.write(f"**üó£Ô∏è Nh·∫≠n d·∫°ng:** {item['transcribed']}")
                with col_h2:
                    st.metric("ƒêi·ªÉm s·ªë", f"{item['score']}/100")
                    st.write(f"**üë§ Ng∆∞·ªùi d√πng:** {item['user']}")
                    st.write(f"**üéÆ Ch·∫ø ƒë·ªô:** {item['mode']}")

                if item["wrong_words"]:
                    st.write("**‚ö†Ô∏è L·ªói:**")
                    for w in item["wrong_words"]:
                        st.write(f"- {w}")

# TAB 2: TH·ªêNG K√ä
with tab2:
    st.title("üìä Th·ªëng k√™ v√† Ph√¢n t√≠ch")

    stats = get_statistics()

    if stats and stats["total_attempts"] > 0:
        # Hi·ªÉn th·ªã Streak
        streak = calculate_streak()
        if streak > 0:
            st.markdown(
                f"""
            <div class="streak-badge">
                üî• Streak: {streak} ng√†y li√™n t·ª•c!
            </div>
            """,
                unsafe_allow_html=True,
            )
            st.markdown("")

        # T·ªïng quan
        st.subheader("üìà T·ªïng quan")

        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric("T·ªïng s·ªë l·∫ßn ch·∫•m", stats["total_attempts"])

        with col2:
            st.metric("ƒêi·ªÉm trung b√¨nh", f"{stats['avg_score']:.1f}/100")

        with col3:
            st.metric("ƒêi·ªÉm cao nh·∫•t", f"{stats['max_score']}/100")

        with col4:
            st.metric("H√¥m nay", f"{stats['today_attempts']} l·∫ßn")

        st.divider()

        # Bi·ªÉu ƒë·ªì
        col_chart1, col_chart2 = st.columns(2)

        with col_chart1:
            progress_chart = create_progress_chart()
            if progress_chart:
                st.plotly_chart(progress_chart, use_container_width=True)

        with col_chart2:
            dist_chart = create_score_distribution()
            if dist_chart:
                st.plotly_chart(dist_chart, use_container_width=True)

        st.divider()

        # Bi·ªÉu ƒë·ªì ho·∫°t ƒë·ªông 7 ng√†y
        weekly_chart = create_weekly_chart()
        if weekly_chart:
            st.plotly_chart(weekly_chart, use_container_width=True)

        st.divider()

        # Ph√¢n lo·∫°i ƒëi·ªÉm
        st.subheader("üéØ Ph√¢n lo·∫°i k·∫øt qu·∫£")

        col_cat1, col_cat2, col_cat3, col_cat4 = st.columns(4)

        with col_cat1:
            st.markdown(
                f"""
            <div class="stat-box" style="border-left: 4px solid #00c853;">
                <h3>üü¢ Xu·∫•t s·∫Øc</h3>
                <h2>{stats['excellent_count']}</h2>
                <p>‚â• 90 ƒëi·ªÉm</p>
            </div>
            """,
                unsafe_allow_html=True,
            )

        with col_cat2:
            st.markdown(
                f"""
            <div class="stat-box" style="border-left: 4px solid #ffd600;">
                <h3>üü° Kh√°</h3>
                <h2>{stats['good_count']}</h2>
                <p>75-89 ƒëi·ªÉm</p>
            </div>
            """,
                unsafe_allow_html=True,
            )

        with col_cat3:
            st.markdown(
                f"""
            <div class="stat-box" style="border-left: 4px solid #ff9800;">
                <h3>üü† Trung b√¨nh</h3>
                <h2>{stats['average_count']}</h2>
                <p>60-74 ƒëi·ªÉm</p>
            </div>
            """,
                unsafe_allow_html=True,
            )

        with col_cat4:
            st.markdown(
                f"""
            <div class="stat-box" style="border-left: 4px solid #ff5252;">
                <h3>üî¥ C·∫ßn c·∫£i thi·ªán</h3>
                <h2>{stats['poor_count']}</h2>
                <p>< 60 ƒëi·ªÉm</p>
            </div>
            """,
                unsafe_allow_html=True,
            )

        st.divider()

        # Ph√¢n t√≠ch t·ª´ hay sai
        st.subheader("üîç T·ª´ th∆∞·ªùng b·ªã sai")
        weak_words = get_weak_words()

        if weak_words:
            col_weak1, col_weak2 = st.columns([2, 1])

            with col_weak1:
                st.write("**Top 10 t·ª´ c·∫ßn luy·ªán th√™m:**")
                for idx, (word, count) in enumerate(weak_words, 1):
                    st.write(f"{idx}. **{word}** - Sai {count} l·∫ßn")

            with col_weak2:
                # Bi·ªÉu ƒë·ªì t·ª´ hay sai
                if len(weak_words) > 0:
                    words, counts = zip(*weak_words[:5])
                    fig_weak = go.Figure(
                        data=[
                            go.Bar(
                                x=list(counts),
                                y=list(words),
                                orientation="h",
                                marker_color="#ff5252",
                            )
                        ]
                    )
                    fig_weak.update_layout(
                        title="Top 5 t·ª´ hay sai", xaxis_title="S·ªë l·∫ßn", height=300
                    )
                    st.plotly_chart(fig_weak, use_container_width=True)
        else:
            st.info("Ch∆∞a c√≥ d·ªØ li·ªáu v·ªÅ t·ª´ b·ªã sai.")

        st.divider()

        # Xu·∫•t b√°o c√°o
        st.subheader("üì• Xu·∫•t d·ªØ li·ªáu")

        col_export1, col_export2, col_export3 = st.columns(3)

        with col_export1:
            csv_data = export_history_to_csv()
            if csv_data:
                st.download_button(
                    label="üíæ T·∫£i CSV",
                    data=csv_data,
                    file_name=f"pronunciation_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv",
                    use_container_width=True,
                )

        with col_export2:
            json_data = export_history_to_json()
            if json_data:
                st.download_button(
                    label="üíæ T·∫£i JSON (Backup)",
                    data=json_data,
                    file_name=f"pronunciation_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/json",
                    use_container_width=True,
                )

        with col_export3:
            if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠", use_container_width=True):
                if st.session_state.get("confirm_delete", False):
                    st.session_state.history = []
                    st.session_state.confirm_delete = False
                    st.rerun()
                else:
                    st.session_state.confirm_delete = True
                    st.warning("‚ö†Ô∏è Nh·∫•n l·∫ßn n·ªØa ƒë·ªÉ x√°c nh·∫≠n!")

    else:
        st.info("üìä Ch∆∞a c√≥ d·ªØ li·ªáu th·ªëng k√™. H√£y b·∫Øt ƒë·∫ßu luy·ªán t·∫≠p!")

# TAB 3: TH∆Ø VI·ªÜN C√ÇU
with tab3:
    st.title("üìö Th∆∞ vi·ªán c√¢u m·∫´u")

    st.markdown("### Danh s√°ch c√¢u theo ch·ªß ƒë·ªÅ")

    for category, sentences in SENTENCE_LIBRARY.items():
        with st.expander(f"{category} ({len(sentences)} c√¢u)"):
            for idx, sentence in enumerate(sentences, 1):
                col_sent, col_fav, col_note = st.columns([3, 1, 1])

                with col_sent:
                    st.write(f"{idx}. {sentence}")

                with col_fav:
                    if sentence in st.session_state.favorite_sentences:
                        if st.button("‚≠ê", key=f"unfav_{category}_{idx}"):
                            st.session_state.favorite_sentences.remove(sentence)
                            st.rerun()
                    else:
                        if st.button("‚òÜ", key=f"fav_{category}_{idx}"):
                            st.session_state.favorite_sentences.append(sentence)
                            st.rerun()

                with col_note:
                    if st.button("üìù", key=f"note_{category}_{idx}"):
                        st.session_state[f"show_note_{sentence}"] = True

                # Hi·ªÉn th·ªã form ghi ch√∫
                if st.session_state.get(f"show_note_{sentence}", False):
                    with st.form(key=f"note_form_{category}_{idx}"):
                        current_note = st.session_state.sentence_notes.get(sentence, "")
                        note_text = st.text_area(
                            "Ghi ch√∫ c·ªßa b·∫°n:", value=current_note, height=100
                        )

                        col_save, col_cancel = st.columns(2)
                        with col_save:
                            if st.form_submit_button("üíæ L∆∞u"):
                                if note_text.strip():
                                    st.session_state.sentence_notes[sentence] = (
                                        note_text
                                    )
                                else:
                                    if sentence in st.session_state.sentence_notes:
                                        del st.session_state.sentence_notes[sentence]
                                st.session_state[f"show_note_{sentence}"] = False
                                st.rerun()

                        with col_cancel:
                            if st.form_submit_button("‚ùå H·ªßy"):
                                st.session_state[f"show_note_{sentence}"] = False
                                st.rerun()

    st.divider()

    # Danh s√°ch y√™u th√≠ch
    st.markdown("### ‚≠ê C√¢u y√™u th√≠ch c·ªßa b·∫°n")

    if st.session_state.favorite_sentences:
        for idx, sentence in enumerate(st.session_state.favorite_sentences, 1):
            col_fav_sent, col_fav_note, col_fav_remove = st.columns([3, 1, 1])

            with col_fav_sent:
                st.write(f"{idx}. {sentence}")
                # Hi·ªÉn th·ªã ghi ch√∫ n·∫øu c√≥
                if sentence in st.session_state.sentence_notes:
                    st.caption(f"üìù {st.session_state.sentence_notes[sentence]}")

            with col_fav_note:
                if st.button("üìù", key=f"note_fav_{idx}"):
                    st.session_state[f"show_note_fav_{sentence}"] = True

            with col_fav_remove:
                if st.button("üóëÔ∏è", key=f"remove_fav_{idx}"):
                    st.session_state.favorite_sentences.remove(sentence)
                    st.rerun()

            # Form ghi ch√∫ cho c√¢u y√™u th√≠ch
            if st.session_state.get(f"show_note_fav_{sentence}", False):
                with st.form(key=f"note_form_fav_{idx}"):
                    current_note = st.session_state.sentence_notes.get(sentence, "")
                    note_text = st.text_area(
                        "Ghi ch√∫ c·ªßa b·∫°n:", value=current_note, height=100
                    )

                    col_save, col_cancel = st.columns(2)
                    with col_save:
                        if st.form_submit_button("üíæ L∆∞u"):
                            if note_text.strip():
                                st.session_state.sentence_notes[sentence] = note_text
                            else:
                                if sentence in st.session_state.sentence_notes:
                                    del st.session_state.sentence_notes[sentence]
                            st.session_state[f"show_note_fav_{sentence}"] = False
                            st.rerun()

                    with col_cancel:
                        if st.form_submit_button("‚ùå H·ªßy"):
                            st.session_state[f"show_note_fav_{sentence}"] = False
                            st.rerun()
    else:
        st.info("Ch∆∞a c√≥ c√¢u y√™u th√≠ch. Nh·∫•n ‚òÜ ƒë·ªÉ th√™m c√¢u v√†o danh s√°ch!")

# TAB 4: C√ÄI ƒê·∫∂T
with tab4:
    st.title("‚öôÔ∏è C√†i ƒë·∫∑t")

    # Th√¥ng tin ng∆∞·ªùi d√πng
    st.subheader("üë§ Th√¥ng tin ng∆∞·ªùi d√πng")
    user_name = st.text_input("T√™n c·ªßa b·∫°n:", value=st.session_state.user_name)

    if user_name != st.session_state.user_name:
        st.session_state.user_name = user_name
        st.success("‚úÖ ƒê√£ l∆∞u t√™n!")

    st.divider()

    # C√†i ƒë·∫∑t m·ª•c ti√™u
    st.subheader("üéØ M·ª•c ti√™u luy·ªán t·∫≠p")
    daily_goal = st.slider(
        "S·ªë l·∫ßn luy·ªán t·∫≠p m·ªói ng√†y:",
        min_value=1,
        max_value=50,
        value=st.session_state.daily_goal,
        help="ƒê·∫∑t m·ª•c ti√™u s·ªë l·∫ßn luy·ªán t·∫≠p h√†ng ng√†y",
    )

    if daily_goal != st.session_state.daily_goal:
        st.session_state.daily_goal = daily_goal
        st.success(f"‚úÖ ƒê√£ ƒë·∫∑t m·ª•c ti√™u: {daily_goal} l·∫ßn/ng√†y")

    st.divider()

    # C√†i ƒë·∫∑t Model Whisper
    st.subheader("ü§ñ M√¥ h√¨nh AI")

    col_model1, col_model2 = st.columns(2)

    with col_model1:
        model_size = st.selectbox(
            "Ch·ªçn m√¥ h√¨nh Whisper:",
            options=["tiny", "base", "small"],
            index=["tiny", "base", "small"].index(st.session_state.model_size),
            help="""
            - tiny: Nhanh nh·∫•t, ƒë·ªô ch√≠nh x√°c th·∫•p nh·∫•t (39MB)
            - base: C√¢n b·∫±ng t·ªëc ƒë·ªô v√† ƒë·ªô ch√≠nh x√°c (74MB) - Khuy·∫øn ngh·ªã
            - small: Ch·∫≠m h∆°n nh∆∞ng ch√≠nh x√°c h∆°n (244MB)
            """,
        )

    with col_model2:
        if st.session_state.model is not None:
            st.success(f"Model ƒëang d√πng: **{st.session_state.model_size}**")
        else:
            st.warning("Ch∆∞a load model")

    if st.button("Load/Reload Model", type="primary", use_container_width=True):
        with st.spinner(f"ƒêang t·∫£i model {model_size}..."):
            model = load_whisper_model(model_size)
            if model:
                st.session_state.model = model
                st.session_state.model_size = model_size
                st.success(f"‚úÖ ƒê√£ load model {model_size} th√†nh c√¥ng!")
                st.balloons()
            else:
                st.error("‚ùå Kh√¥ng th·ªÉ load model. Vui l√≤ng th·ª≠ l·∫°i.")

    st.divider()

    # Import/Export d·ªØ li·ªáu
    st.subheader("üíæ Sao l∆∞u & Kh√¥i ph·ª•c")

    col_backup1, col_backup2 = st.columns(2)

    with col_backup1:
        st.markdown("**Xu·∫•t d·ªØ li·ªáu (Backup)**")
        json_backup = export_history_to_json()
        if json_backup:
            st.download_button(
                label="üì• T·∫£i file backup (JSON)",
                data=json_backup,
                file_name=f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json",
                use_container_width=True,
            )
        else:
            st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ backup")

    with col_backup2:
        st.markdown("**Nh·∫≠p d·ªØ li·ªáu (Restore)**")
        upload_backup = st.file_uploader(
            "Ch·ªçn file backup JSON:",
            type=["json"],
            help="Upload file JSON ƒë√£ backup tr∆∞·ªõc ƒë√≥",
        )

        if upload_backup:
            if st.button("üì§ Kh√¥i ph·ª•c d·ªØ li·ªáu", use_container_width=True):
                if import_history_from_json(upload_backup):
                    st.success("‚úÖ ƒê√£ kh√¥i ph·ª•c d·ªØ li·ªáu th√†nh c√¥ng!")
                    st.rerun()
                else:
                    st.error("‚ùå Kh√¥ng th·ªÉ kh√¥i ph·ª•c. File kh√¥ng h·ª£p l·ªá.")

    st.divider()

    # Th√¥ng tin ·ª©ng d·ª•ng
    st.subheader("‚ÑπÔ∏è Th√¥ng tin ·ª©ng d·ª•ng")

    st.info(
        """
    **üéØ ·ª®ng d·ª•ng Ch·∫•m Ph√°t √Çm Ti·∫øng Anh**
    
    **Phi√™n b·∫£n:** 2.0 Enhanced
    
    **T√≠nh nƒÉng ch√≠nh:**
    - Ch·∫•m ƒëi·ªÉm ph√°t √¢m t·ª± ƒë·ªông v·ªõi AI
    - Th·ªëng k√™ chi ti·∫øt v√† bi·ªÉu ƒë·ªì tr·ª±c quan
    - Theo d√µi streak v√† m·ª•c ti√™u h√†ng ng√†y
    - Th∆∞ vi·ªán c√¢u m·∫´u phong ph√∫
    - Ghi ch√∫ c√° nh√¢n cho t·ª´ng c√¢u
    - Sao l∆∞u/kh√¥i ph·ª•c d·ªØ li·ªáu
    - Ph√¢n t√≠ch t·ª´ hay b·ªã sai
    
    **C√¥ng ngh·ªá:**
    - Streamlit
    - OpenAI Whisper
    - Plotly Charts
    - FuzzyWuzzy
    
    **H·ªó tr·ª£:** M·ªçi th·∫Øc m·∫Øc vui l√≤ng li√™n h·ªá qua email ho·∫∑c GitHub.
    """
    )

    st.divider()

    # N√∫t reset to√†n b·ªô
    st.subheader("üö® Zone Nguy hi·ªÉm")

    if st.button("üóëÔ∏è X√≥a to√†n b·ªô d·ªØ li·ªáu v√† c√†i ƒë·∫∑t", type="secondary"):
        if st.session_state.get("confirm_reset_all", False):
            st.session_state.history = []
            st.session_state.favorite_sentences = []
            st.session_state.sentence_notes = {}
            st.session_state.user_name = "H·ªçc vi√™n"
            st.session_state.daily_goal = 10
            st.session_state.confirm_reset_all = False
            st.success("‚úÖ ƒê√£ reset to√†n b·ªô!")
            st.rerun()
        else:
            st.session_state.confirm_reset_all = True
            st.error(
                "‚ö†Ô∏è C·∫¢NH B√ÅO: B·∫°n s·∫Ω m·∫•t to√†n b·ªô d·ªØ li·ªáu! Nh·∫•n l·∫ßn n·ªØa ƒë·ªÉ x√°c nh·∫≠n."
            )

# Footer
st.divider()
st.markdown(
    """
<style>
.footer-link {
    color: gray;
    text-decoration: none;
    transition: color 0.3s ease;
}
.footer-link:hover {
    color: #1f77b4; /* xanh nh·∫°t khi hover */
}
</style>

<div style='text-align: center; color: gray; padding: 16px 0; font-size: 14px;'>
    <p><strong>·ª®ng d·ª•ng Ch·∫•m Ph√°t √Çm Ti·∫øng Anh</strong></p>
    <p>Mi·ªÖn ph√≠ ‚Ä¢ Offline/Online ‚Ä¢ Kh√¥ng d√πng API tr·∫£ ph√≠</p>
    <p>S·ª≠ d·ª•ng: Whisper (OpenAI) + Streamlit</p>
    <p style='margin-top:10px;'>¬© 2025 
        <a href='https://www.facebook.com/augusttrung1823/' target='_blank' class='footer-link'>
            August Trung
        </a>. All rights reserved.
    </p>
</div>
""",
    unsafe_allow_html=True,
)
